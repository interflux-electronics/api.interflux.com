name: Continuous Deployment

on:
  push:
    branches:
      - 'production'

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:11
  #       ports: ["5432:5432"]
  #       env:
  #         POSTGRES_USER: bot
  #         POSTGRES_DB: interflux_test
  #         POSTGRES_PASSWORD: password
  #   env:
  #     RAILS_ENV: test
  #     PG_HOST: localhost
  #     PG_USER: bot
  #     PG_DATABASE: interflux_test
  #     PG_PASSWORD: password
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #     - run: bin/rails db:create
  #     - run: bin/rails db:schema:load
  #     - run: bin/rails test --verbose

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # needs: test
    env:
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      URL: bot@server.interflux.com
      DOMAIN: api.interflux.com
      BRANCH: production
      ROOT: /var/www/api.interflux.com
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get install jq
      - run: echo "REVISION=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      - run: echo "BUILD="builds/$BRANCH/$REVISION/"" >> $GITHUB_ENV

      # Create directory for SSH
      - run: mkdir ~/.ssh

      # Add the private key of the restricted bot user on the remote server
      - run: 'echo "$PRIVATE_KEY" > ~/.ssh/$URL'

      # Configure SSH to always use the custom key, so we don't have to do ssh -i
      - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'

      # Add the remote server to trusted hosts
      - run: ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts

      # Set all SSH file permissions
      - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts

      - run: ssh $URL "cd $ROOT; rm -rf builds/$BRANCH/$REVISION/; mkdir builds/$BRANCH/$REVISION/"
      - run: ssh $URL "cd $ROOT; git --git-dir=repo fetch; git --git-dir=repo --work-tree=builds/$BRANCH/$REVISION checkout $REVISION -f"
      - run: ssh $URL "cd $ROOT/$BUILD; echo \"GIT_BRANCH=$BRANCH\" >> .rbenv-vars; echo \"GIT_REVISION=$REVISION\" >> .rbenv-vars"
      - run: ssh $URL "cd $ROOT/$BUILD; rbenv install -s"
      - run: ssh $URL "cd $ROOT/$BUILD; bin/bundle install"
      - run: ssh $URL "cd $ROOT/$BUILD; export RAILS_ENV=production; bin/rails db:migrate --verbose"
      - run: ssh $URL "ln -nsf $ROOT/builds/$BRANCH/$REVISION $ROOT/builds/$BRANCH/latest"

      # Restart the Puma app server. On restart Puma will follow the symbolic link we just made
      # and will use the newly deployed code to spin up concurrent Rails app servers.
      # We conciously avoid Puma's "phased-restart" and "restart" because these have issues.
      - run: ssh $URL "cd $ROOT/$BUILD; bin/pumactl -F config/puma/production.rb -T '12345' stop; bin/pumactl -F config/puma/production.rb -T '12345' start"

      # The infamous sanity check.
      # If all went well then our Rails app should be return status 200 and the latest Git revision.
      - run: "curl https://api.interflux.com/sanity-check -H 'Content-Type: application/vnd.api+json'"

      # Clean up time! Remove all builds except the one that was just deployed.
      # The find command behaves a bit different in Fish, compared to Bash:
      # https://unix.stackexchange.com/questions/301225/find-exec-not-working-in-fish
      - run: ssh $URL "cd $ROOT/; find builds/production/ -type d -mindepth 1 -maxdepth 1 -not -name $REVISION -exec rm -rf '{}' +"

# echo "Sanity check on remote"
# (
#   set -x;
#   curl --unix-socket /var/www/api.interflux.com/sockets/puma.sock http://localhost/sanity-check -H "Content-Type: application/vnd.api+json" | jq
# )

# and echo Removing all builds except the latest one
# and echo find ../ -mindepth 1 -maxdepth 1 -type d -not -name $revision -exec echo rm -rf {} \;
# and find ../ -mindepth 1 -maxdepth 1 -type d -not -name $revision -exec echo rm -rf {} \;
# and find ../ -mindepth 1 -maxdepth 1 -type d -not -name $revision -exec rm -rf {} \;
